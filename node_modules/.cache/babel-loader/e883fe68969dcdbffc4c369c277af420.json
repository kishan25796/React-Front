{"ast":null,"code":"var _jsxFileName = \"D:\\\\studentapp\\\\src\\\\components\\\\OtpInput\\\\otpindex.js\";\n\n/* eslint-disable react/jsx-props-no-spreading */\n\n/* eslint-disable prefer-destructuring */\n\n/* eslint-disable react/no-array-index-key */\nimport React, { memo, useState, useCallback } from \"react\";\nimport SingleInput from \"./SingleInput\";\nexport function OTPInputComponent(props) {\n  const {\n    length,\n    isNumberInput,\n    autoFocus,\n    disabled,\n    onChangeOTP,\n    inputClassName,\n    inputStyle,\n    ...rest\n  } = props;\n  const [activeInput, setActiveInput] = useState(0);\n  const [otpValues, setOTPValues] = useState(Array(length).fill(\"\")); // Helper to return OTP from inputs\n\n  const handleOtpChange = useCallback(otp => {\n    const otpValue = otp.join(\"\");\n    onChangeOTP(otpValue);\n  }, [onChangeOTP]); // Helper to return value with the right type: 'text' or 'number'\n\n  const getRightValue = useCallback(str => {\n    let changedValue = str;\n\n    if (!isNumberInput) {\n      return changedValue;\n    }\n\n    return !changedValue || /\\d/.test(changedValue) ? changedValue : \"\";\n  }, [isNumberInput]); // Change OTP value at focussing input\n\n  const changeCodeAtFocus = useCallback(str => {\n    const updatedOTPValues = [...otpValues];\n    updatedOTPValues[activeInput] = str[0] || \"\";\n    setOTPValues(updatedOTPValues);\n    handleOtpChange(updatedOTPValues);\n  }, [activeInput, handleOtpChange, otpValues]); // Focus `inputIndex` input\n\n  const focusInput = useCallback(inputIndex => {\n    const selectedIndex = Math.max(Math.min(length - 1, inputIndex), 0);\n    setActiveInput(selectedIndex);\n  }, [length]);\n  const focusPrevInput = useCallback(() => {\n    focusInput(activeInput - 1);\n  }, [activeInput, focusInput]);\n  const focusNextInput = useCallback(() => {\n    focusInput(activeInput + 1);\n  }, [activeInput, focusInput]); // Handle onFocus input\n\n  const handleOnFocus = useCallback(index => () => {\n    focusInput(index);\n  }, [focusInput]); // Handle onChange value for each input\n\n  const handleOnChange = useCallback(e => {\n    const val = getRightValue(e.currentTarget.value);\n\n    if (!val) {\n      e.preventDefault();\n      return;\n    }\n\n    changeCodeAtFocus(val);\n    focusNextInput();\n  }, [changeCodeAtFocus, focusNextInput, getRightValue]); // Hanlde onBlur input\n\n  const onBlur = useCallback(() => {\n    setActiveInput(-1);\n  }, []); // Handle onKeyDown input\n\n  const handleOnKeyDown = useCallback(e => {\n    switch (e.key) {\n      case \"Backspace\":\n      case \"Delete\":\n        {\n          e.preventDefault();\n\n          if (otpValues[activeInput]) {\n            changeCodeAtFocus(\"\");\n          } else {\n            focusPrevInput();\n          }\n\n          break;\n        }\n\n      case \"ArrowLeft\":\n        {\n          e.preventDefault();\n          focusPrevInput();\n          break;\n        }\n\n      case \"ArrowRight\":\n        {\n          e.preventDefault();\n          focusNextInput();\n          break;\n        }\n\n      case \" \":\n        {\n          e.preventDefault();\n          break;\n        }\n\n      default:\n        break;\n    }\n  }, [activeInput, changeCodeAtFocus, focusNextInput, focusPrevInput, otpValues]);\n  const handleOnPaste = useCallback(e => {\n    e.preventDefault();\n    const pastedData = e.clipboardData.getData(\"text/plain\").trim().slice(0, length - activeInput).split(\"\");\n\n    if (pastedData) {\n      let nextFocusIndex = 0;\n      const updatedOTPValues = [...otpValues];\n      updatedOTPValues.forEach((val, index) => {\n        if (index >= activeInput) {\n          const changedValue = getRightValue(pastedData.shift() || val);\n\n          if (changedValue) {\n            updatedOTPValues[index] = changedValue;\n            nextFocusIndex = index;\n          }\n        }\n      });\n      setOTPValues(updatedOTPValues);\n      setActiveInput(Math.min(nextFocusIndex + 1, length - 1));\n    }\n  }, [activeInput, getRightValue, length, otpValues]);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 3\n    }\n  }), Array(length).fill(\"\").map((_, index) => /*#__PURE__*/React.createElement(SingleInput, {\n    key: `SingleInput-${index}`,\n    focus: activeInput === index,\n    autoFocus: autoFocus,\n    value: otpValues && otpValues[index],\n    onFocus: handleOnFocus(index),\n    onChange: handleOnChange,\n    onKeyDown: handleOnKeyDown,\n    onBlur: onBlur,\n    onPaste: handleOnPaste,\n    className: inputClassName,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 6\n    }\n  })));\n}\nconst OTPInput = memo(OTPInputComponent);\nexport default OTPInput;","map":{"version":3,"names":["React","memo","useState","useCallback","SingleInput","OTPInputComponent","props","length","isNumberInput","autoFocus","disabled","onChangeOTP","inputClassName","inputStyle","rest","activeInput","setActiveInput","otpValues","setOTPValues","Array","fill","handleOtpChange","otp","otpValue","join","getRightValue","str","changedValue","test","changeCodeAtFocus","updatedOTPValues","focusInput","inputIndex","selectedIndex","Math","max","min","focusPrevInput","focusNextInput","handleOnFocus","index","handleOnChange","e","val","currentTarget","value","preventDefault","onBlur","handleOnKeyDown","key","handleOnPaste","pastedData","clipboardData","getData","trim","slice","split","nextFocusIndex","forEach","shift","map","_","OTPInput"],"sources":["D:/studentapp/src/components/OtpInput/otpindex.js"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable react/no-array-index-key */\nimport React, { memo, useState, useCallback } from \"react\";\nimport SingleInput from \"./SingleInput\";\n\nexport function OTPInputComponent(props) {\n\tconst {\n\t\tlength,\n\t\tisNumberInput,\n\t\tautoFocus,\n\t\tdisabled,\n\t\tonChangeOTP,\n\t\tinputClassName,\n\t\tinputStyle,\n\t\t...rest\n\t} = props;\n\n\tconst [activeInput, setActiveInput] = useState(0);\n\tconst [otpValues, setOTPValues] = useState(Array(length).fill(\"\"));\n\n\t// Helper to return OTP from inputs\n\tconst handleOtpChange = useCallback(\n\t\t(otp) => {\n\t\t\tconst otpValue = otp.join(\"\");\n\t\t\tonChangeOTP(otpValue);\n\t\t},\n\t\t[onChangeOTP]\n\t);\n\n\t// Helper to return value with the right type: 'text' or 'number'\n\tconst getRightValue = useCallback(\n\t\t(str) => {\n\t\t\tlet changedValue = str;\n\t\t\tif (!isNumberInput) {\n\t\t\t\treturn changedValue;\n\t\t\t}\n\t\t\treturn !changedValue || /\\d/.test(changedValue) ? changedValue : \"\";\n\t\t},\n\t\t[isNumberInput]\n\t);\n\n\t// Change OTP value at focussing input\n\tconst changeCodeAtFocus = useCallback(\n\t\t(str) => {\n\t\t\tconst updatedOTPValues = [...otpValues];\n\t\t\tupdatedOTPValues[activeInput] = str[0] || \"\";\n\t\t\tsetOTPValues(updatedOTPValues);\n\t\t\thandleOtpChange(updatedOTPValues);\n\t\t},\n\t\t[activeInput, handleOtpChange, otpValues]\n\t);\n\n\t// Focus `inputIndex` input\n\tconst focusInput = useCallback(\n\t\t(inputIndex) => {\n\t\t\tconst selectedIndex = Math.max(Math.min(length - 1, inputIndex), 0);\n\t\t\tsetActiveInput(selectedIndex);\n\t\t},\n\t\t[length]\n\t);\n\n\tconst focusPrevInput = useCallback(() => {\n\t\tfocusInput(activeInput - 1);\n\t}, [activeInput, focusInput]);\n\n\tconst focusNextInput = useCallback(() => {\n\t\tfocusInput(activeInput + 1);\n\t}, [activeInput, focusInput]);\n\n\t// Handle onFocus input\n\tconst handleOnFocus = useCallback(\n\t\t(index) => () => {\n\t\t\tfocusInput(index);\n\t\t},\n\t\t[focusInput]\n\t);\n\n\t// Handle onChange value for each input\n\tconst handleOnChange = useCallback(\n\t\t(e) => {\n\t\t\tconst val = getRightValue(e.currentTarget.value);\n\t\t\tif (!val) {\n\t\t\t\te.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tchangeCodeAtFocus(val);\n\t\t\tfocusNextInput();\n\t\t},\n\t\t[changeCodeAtFocus, focusNextInput, getRightValue]\n\t);\n\n\t// Hanlde onBlur input\n\tconst onBlur = useCallback(() => {\n\t\tsetActiveInput(-1);\n\t}, []);\n\n\t// Handle onKeyDown input\n\tconst handleOnKeyDown = useCallback(\n\t\t(e) => {\n\t\t\tswitch (e.key) {\n\t\t\t\tcase \"Backspace\":\n\t\t\t\tcase \"Delete\": {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tif (otpValues[activeInput]) {\n\t\t\t\t\t\tchangeCodeAtFocus(\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfocusPrevInput();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"ArrowLeft\": {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tfocusPrevInput();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"ArrowRight\": {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tfocusNextInput();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \" \": {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\t[activeInput, changeCodeAtFocus, focusNextInput, focusPrevInput, otpValues]\n\t);\n\n\tconst handleOnPaste = useCallback(\n\t\t(e) => {\n\t\t\te.preventDefault();\n\t\t\tconst pastedData = e.clipboardData\n\t\t\t\t.getData(\"text/plain\")\n\t\t\t\t.trim()\n\t\t\t\t.slice(0, length - activeInput)\n\t\t\t\t.split(\"\");\n\t\t\tif (pastedData) {\n\t\t\t\tlet nextFocusIndex = 0;\n\t\t\t\tconst updatedOTPValues = [...otpValues];\n\t\t\t\tupdatedOTPValues.forEach((val, index) => {\n\t\t\t\t\tif (index >= activeInput) {\n\t\t\t\t\t\tconst changedValue = getRightValue(pastedData.shift() || val);\n\t\t\t\t\t\tif (changedValue) {\n\t\t\t\t\t\t\tupdatedOTPValues[index] = changedValue;\n\t\t\t\t\t\t\tnextFocusIndex = index;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsetOTPValues(updatedOTPValues);\n\t\t\t\tsetActiveInput(Math.min(nextFocusIndex + 1, length - 1));\n\t\t\t}\n\t\t},\n\t\t[activeInput, getRightValue, length, otpValues]\n\t);\n\n\treturn (\n\t\t<div {...rest}>\n\t\t\t{Array(length)\n\t\t\t\t.fill(\"\")\n\t\t\t\t.map((_, index) => (\n\t\t\t\t\t<SingleInput\n\t\t\t\t\t\tkey={`SingleInput-${index}`}\n\t\t\t\t\t\tfocus={activeInput === index}\n\t\t\t\t\t\tautoFocus={autoFocus}\n\t\t\t\t\t\tvalue={otpValues && otpValues[index]}\n\t\t\t\t\t\tonFocus={handleOnFocus(index)}\n\t\t\t\t\t\tonChange={handleOnChange}\n\t\t\t\t\t\tonKeyDown={handleOnKeyDown}\n\t\t\t\t\t\tonBlur={onBlur}\n\t\t\t\t\t\tonPaste={handleOnPaste}\n\t\t\t\t\t\tclassName={inputClassName}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t</div>\n\t);\n}\n\nconst OTPInput = memo(OTPInputComponent);\nexport default OTPInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}